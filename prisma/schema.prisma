// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  role          Role         @default(USER)
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  reviews       Review[]
  comments      Comment[]
  accounts      Account[]
  sessions      Session[]
  like          Like[]
  userRating    UserRating[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Review {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  published       Boolean       @default(false)
  thumbnail       String?       @db.VarChar(1000)
  title           String
  subtitle        String?       @db.VarChar(1000)
  author          User          @relation(fields: [authorId], references: [id])
  authorId        String
  reviewedPiece   ReviewedPiece @relation(fields: [reviewedPieceId], references: [id])
  reviewedPieceId String
  group           Group         @relation(fields: [groupId], references: [id])
  groupId         String
  tags            Tag[]
  content         Json
  authorRating    Int
  comments        Comment[]
  like            Like[]
  userRating      UserRating[]
}

model ReviewedPiece {
  id        String   @id @default(cuid())
  value     String   @unique
  label     String
  authors   String
  published String
  image     String
  reviews   Review[]
}

model Group {
  id      String   @id @default(cuid())
  name    String   @unique
  reviews Review[]
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  review    Review   @relation(fields: [reviewId], references: [id])
  reviewId  String
}

model Like {
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  review   Review @relation(fields: [reviewId], references: [id])
  reviewId String
}

model UserRating {
  id       String @id @default(cuid())
  rating   Int
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  review   Review @relation(fields: [reviewId], references: [id])
  reviewId String
}

model Tag {
  id      String   @id @default(cuid())
  name    String   @unique
  reviews Review[]
}

enum Role {
  USER
  ADMIN
}
